@startuml
header Dentist Booking Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Appointment"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:appointments" as routerAppointments
participant "<<router>>\n:auths" as routerAuth
participant "<<router>>\n:dentists" as routerDentists
participant "<<controllers>>\n:appointments" as controllersAppointments
participant "<<controllers>>\n:auths" as controllersAuth
participant "<<controllers>>\n:dentists" as controllersDentists
participant "<<model>>\n:Appointments" as modelAppointment
participant "<<model>>\n:Users" as modelUser
participant "<<model>>\n:Dentists" as modelDentist
database "<<Redis>>\n:appointmentLockQueue" as AppointmentsLockDatabase
database "<<MongoDB>>\n:appointments" as AppointmentsDatabase
database "<<MongoDB>>\n:users" as UsersDatabase
database "<<MongoDB>>\n:dentists" as DentistsDatabase


client->server ++:req.post('/api/v1/auth/register')
server->routerAuth ++:app.use('/api/v1/auth', auths)
routerAuth -> controllersAuth ++: register()
controllersAuth -> modelUser ++: create(req.body)
modelUser -> UsersDatabase ++: save new user
UsersDatabase --> modelUser --: saved user
modelUser --> controllersAuth --: new user
controllersAuth -> client --: response (verification email sent)



client->server :req.post('/api/v1/auth/login')
server->routerAuth :app.use('/api/v1/auth', auths)
routerAuth -> controllersAuth ++: login()
controllersAuth -> modelUser ++: findOne({ email }).select("+password")
modelUser -> UsersDatabase ++: query by email
UsersDatabase --> modelUser --: user
modelUser --> controllersAuth --: user
controllersAuth -> client --: response (JWT set in cookie)



client->server :req.post('/api/v1/auth/me')
server->routerAuth :app.use('/api/v1/auth', auths)
routerAuth -> controllersAuth ++: getMe()
controllersAuth -> modelUser ++: findById(req.user.id)
modelUser -> UsersDatabase ++: find user
UsersDatabase --> modelUser --: user
modelUser --> controllersAuth --: user
controllersAuth -> client --: response (current user info)



client->server :req.get('/api/v1/auth/logout')
server->routerAuth :app.use('/api/v1/auth', auths)
routerAuth -> controllersAuth ++: logout()
controllersAuth -> client --: response (cookie cleared)



client->server :req.get('/api/v1/auth/verify-email?token=...')
server->routerAuth :app.use('/api/v1/auth', auths)
routerAuth -> controllersAuth ++: verifyEmail()
controllersAuth -> modelUser ++: verify token & find user
modelUser -> UsersDatabase ++: findById(decoded.id)
UsersDatabase --> modelUser --: user
modelUser --> controllersAuth --: user
controllersAuth -> UsersDatabase ++: update user as verified
UsersDatabase --> controllersAuth --: updated
controllersAuth -> client --: response (email verified)
@enduml
